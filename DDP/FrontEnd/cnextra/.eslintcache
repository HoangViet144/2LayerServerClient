[{"D:\\hoc\\college\\3hk1\\mmt mr\\2LayerServerClient\\DDP\\FrontEnd\\cnextra\\src\\index.js":"1","D:\\hoc\\college\\3hk1\\mmt mr\\2LayerServerClient\\DDP\\FrontEnd\\cnextra\\src\\reportWebVitals.js":"2","D:\\hoc\\college\\3hk1\\mmt mr\\2LayerServerClient\\DDP\\FrontEnd\\cnextra\\src\\App.js":"3","D:\\hoc\\college\\3hk1\\mmt mr\\2LayerServerClient\\DDP\\FrontEnd\\cnextra\\src\\database\\firebase.js":"4","D:\\hoc\\college\\3hk1\\mmt mr\\2LayerServerClient\\DDP\\FrontEnd\\cnextra\\src\\view\\chart.js":"5"},{"size":500,"mtime":1611723189000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1611723189000,"results":"8","hashOfConfig":"7"},{"size":2306,"mtime":1611723189000,"results":"9","hashOfConfig":"7"},{"size":549,"mtime":1611723189000,"results":"10","hashOfConfig":"7"},{"size":777,"mtime":1611723189000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"f60do1",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\hoc\\college\\3hk1\\mmt mr\\2LayerServerClient\\DDP\\FrontEnd\\cnextra\\src\\index.js",[],["24","25"],"D:\\hoc\\college\\3hk1\\mmt mr\\2LayerServerClient\\DDP\\FrontEnd\\cnextra\\src\\reportWebVitals.js",[],"D:\\hoc\\college\\3hk1\\mmt mr\\2LayerServerClient\\DDP\\FrontEnd\\cnextra\\src\\App.js",["26","27","28"],"import logo from './logo.svg';\nimport './App.css';\nimport firebase from './database/firebase'\nimport React, { useState, useEffect } from 'react'\nimport Chart from './view/chart'\nimport axios from 'axios';\n\nconst App = () => {\n    const db = firebase.database();\n    const [data, setData] = useState({ data: [], label: [] })\n\n    // useEffect(() => {\n    //     const dataRef = firebase.database().ref('lossdata');\n    //     dataRef.on('value', (snapshot) => {\n    //         const dataReceived = snapshot.val();\n    //         const newdata = { data: [], label: [] }\n    //         let j = 0\n    //         console.log(\"change\")\n    //         console.log(dataReceived)\n    //         for (let id in dataReceived) {\n    //             if (dataReceived[id].length > 0) {\n    //                 newdata.data = newdata.data.concat(dataReceived[id])\n    //                 for (let i = 0; i < dataReceived[id].length; i++)\n    //                     newdata.label.push(j++)\n    //             }\n    //             // newdata.data.push(dataReceived[id])\n    //             // newdata.label.push(j++)\n    //         }\n    //         setData(newdata)\n    //     });\n    // }, [])\n    let id = null\n    useEffect(() => {\n        const getdata = async () => {\n            try {\n                const config = {\n                    method: 'get',\n                    url: \"http://localhost:9000/log\",\n                };\n                await axios(config).then(respose => {\n                    console.log(respose.data.data[0])\n                    const newdata = { data: [], label: [] }\n                    const datareceived = respose.data.data\n                    for (let i = 0; i < respose.data.data.length; i++) {\n                        newdata.label.push(i + 1)\n                        newdata.data.push(datareceived[i].data)\n                    }\n                    if (newdata.data.length === data.data.length) clearInterval(id);\n                    setData(newdata)\n                })\n            }\n            catch (er) {\n                console.log(er)\n            }\n        }\n        id = setInterval(getdata, 1000);\n        return () => clearInterval(id);\n    }, []);\n    return (\n        <div className=\"App\">\n            <Chart datareceived={data} />\n        </div>\n    );\n}\n\nexport default App;\n","D:\\hoc\\college\\3hk1\\mmt mr\\2LayerServerClient\\DDP\\FrontEnd\\cnextra\\src\\database\\firebase.js",[],"D:\\hoc\\college\\3hk1\\mmt mr\\2LayerServerClient\\DDP\\FrontEnd\\cnextra\\src\\view\\chart.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"33","severity":1,"message":"37","line":9,"column":11,"nodeType":"35","messageId":"36","endLine":9,"endColumn":13},{"ruleId":"38","severity":1,"message":"39","line":56,"column":14,"nodeType":"40","endLine":56,"endColumn":40},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'db' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'id' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation"]